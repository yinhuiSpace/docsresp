import{_ as e,c as a,o as t,d as i}from"./app-BO3JWvQu.js";const r={},l=i('<h1 id="内存屏障" tabindex="-1"><a class="header-anchor" href="#内存屏障"><span>内存屏障</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>内存屏障是一种基础语言，在不同的计算机架构下有不同的实现细节。本文主要在x86_64处理器下，通过Linux及其内核代码来分析和使用内存屏障</p><p>对大多数应用层开发者来说，“内存屏障”（memory Barrier）是一种陌生，甚至有些诡异的技术。实际上，他机制常被用在操作系统内核中，用于实现同步、驱动程序利用它，能够实现高效的无锁数据结构，提高多线程程序的性能表现。本文首先探讨了内存屏障的必要性，之后介绍如何利用内存屏障实现一个无锁唤醒振荡器（队列），用于在多个线程间进行高效的数据交换。</p><h2 id="为什么需要内存屏障" tabindex="-1"><a class="header-anchor" href="#为什么需要内存屏障"><span>为什么需要内存屏障</span></a></h2><p>程序实际运行时很可能并不完全按照开发者编写的顺序访问内存。</p><p>多线程程序中，逻辑的正确性依赖于内存访问顺序，接下来，内存乱序访问会带来逻辑上的错误</p><p>编译器对代码进行优化时，可能会改变实际执行指令的顺序</p><p>使用编译器屏障（又叫优化屏障）。Linux内核提供了函数barrier()，用于让编译器保证其之前的内存访问先于其之后的内存访问完成。</p><p>除了barrier()函数外，本例还可以使用volatile这个关键字来避免编译时内存乱序访问（且只能避免编译时的乱序访问） ，为什么呢，可以参考前面部分的说明，编译器对于 volatile 声明到底做了什么 – volatile 关键字对于编译器而言，是开发者告诉编译器，这个变量内存的修改，可能不再是你可视范围了内部修改，不要对这个变量相关的代码进行优化）。volatile关键字允许对易失性变量之间的内存进行访问</p>',10),n=[l];function s(c,o){return t(),a("div",null,n)}const h=e(r,[["render",s],["__file","内存屏障.html.vue"]]),d=JSON.parse('{"path":"/distribute/lock/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C.html","title":"内存屏障","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"为什么需要内存屏障","slug":"为什么需要内存屏障","link":"#为什么需要内存屏障","children":[]}],"git":{"updatedTime":1720329895000,"contributors":[{"name":"yinhuiSpace","email":"2705696192@qq.com","commits":1}]},"filePathRelative":"distribute/lock/内存屏障.md"}');export{h as comp,d as data};
